{"mappings":"s0BAAA,IAAAA,OAAAC,cAAA,SAEAC,SAASC,iBAAiB,oBAAoB,WAC5C,IAAMC,eAAiBC,UAAU,mBAAoB,CACnDC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAASC,sBAGPC,cAEJ,SAASC,eAAeC,GACtB,OAAOA,EAAQ,GAAK,IAAMA,EAAQA,C,CAGpC,SAASC,UAAUC,GACjB,IACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAOZ,MAAO,CAAEE,KALIC,KAAKC,MAAMP,EAAKI,GAKdI,MAJDF,KAAKC,MAAMP,EAAMI,EAAOD,GAIhBM,QAHNH,KAAKC,MAAMP,EAAOI,EAAOD,EAAQF,GAGlBS,QAFfJ,KAAKC,MAAMP,EAAQI,EAAOD,EAAQF,EARnC,K,CAajB,SAASU,YAAYC,SACnB,IAAMC,IAAMrB,KAAKqB,MACXC,SAAWF,QAAUC,IAE3B,GAAIC,UAAY,EAGd,OAFAC,cAAcnB,oBACdX,SAAS+B,eAAe,gBAAgBC,UAAW,GAIrD,IAA0CC,IAAAnB,UAAUe,UAA5CT,KAAkCa,IAAlCb,KAAMG,MAA4BU,IAA5BV,MAAOC,QAAqBS,IAArBT,QAASC,QAAYQ,IAAZR,QAE9BzB,SAASkC,iBAAiB,UAAUC,SAAQ,SAASC,SACnD,IAAMC,KAAOD,QAAQE,aAAa,aAClCF,QAAQG,YAAc3B,eAAe4B,KAAKH,M,IAI9C,SAAS3B,oBAAoB+B,GACNA,EAAc,GAElBC,UAAYnC,KAAKqB,OAChCe,uBAAA7C,QAAS8C,OAAOC,QAAQ,sCACxB7C,SAAS+B,eAAe,gBAAgBC,UAAW,IAEnDW,uBAAA7C,QAAS8C,OAAOE,QAAQ,+BACxB9C,SAAS+B,eAAe,gBAAgBC,UAAW,E,CAIvDhC,SAAS+B,eAAe,gBAAgB9B,iBAAiB,SAAS,WAChE,IAAM8C,EAAe7C,eAAeuC,cAAc,GAAGC,UACrD/B,cAAgBqC,aAAY,WAC1BtB,YAAYqB,E,GACX,KACHrB,YAAYqB,E","sources":["src/js/02-timer.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  const datetimePicker = flatpickr('#datetime-picker', {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose: handleDateSelection\n  });\n\n  let timerInterval;\n\n  function addLeadingZero(value) {\n    return value < 10 ? '0' + value : value;\n  }\n\n  function convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n  }\n\n  function updateTimer(endTime) {\n    const now = Date.now();\n    const timeLeft = endTime - now;\n\n    if (timeLeft <= 0) {\n      clearInterval(timerInterval);\n      document.getElementById('start-button').disabled = false;\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeLeft);\n\n    document.querySelectorAll('.value').forEach(function(element) {\n      const type = element.getAttribute('data-type');\n      element.textContent = addLeadingZero(eval(type));\n    });\n  }\n\n  function handleDateSelection(selectedDates) {\n    const selectedDate = selectedDates[0];\n\n    if (selectedDate.getTime() < Date.now()) {\n      Notiflix.Notify.Failure('Please choose a date in the future');\n      document.getElementById('start-button').disabled = true;\n    } else {\n      Notiflix.Notify.success('Date selected successfully!');\n      document.getElementById('start-button').disabled = false;\n    }\n  }\n\n  document.getElementById('start-button').addEventListener('click', function() {\n    const selectedDate = datetimePicker.selectedDates[0].getTime();\n    timerInterval = setInterval(function() {\n      updateTimer(selectedDate);\n    }, 1000);\n    updateTimer(selectedDate);\n  });\n});\n"],"names":["$ejkSG","parcelRequire","document","addEventListener","datetimePicker","flatpickr","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","handleDateSelection","timerInterval","addLeadingZero","value","convertMs","ms","minute","second","hour","day","days","Math","floor","hours","minutes","seconds","updateTimer","endTime","now","timeLeft","clearInterval","getElementById","disabled","ref","querySelectorAll","forEach","element","type","getAttribute","textContent","eval","selectedDates","getTime","$parcel$interopDefault","Notify","Failure","success","selectedDate","setInterval"],"version":3,"file":"02-timer.f9a24106.js.map"}